
paths:
  /keys:
    get:
      summary: Returns key based on query parameters
      operationId: getKeys
      description: By including the appropriate query string parameters, search & return relevant key records
      parameters:
        - in: query
          name: clientKey
          description: the ID (username) for the key
          required: false
          schema:
            type: string
        - in: query
          name: orgId
          description: the organization ID
          required: false
          schema:
            type: string
      responses:
        '200':
          description: includes the results matching query string criteria
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Key_FJS_Array'
              examples:
                # EXAMPLE: fetching all keys with the same subjectId
                keys_default:
                  $ref: "#/components/examples/keys_default"
        '400':
          description: bad input parameter
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: adds a new key associated with the unique identifier in the query string
      operationId: postKey
      description: >-
        Creates a new key that is associated with the unique identifier in the query string ('clientKey')
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/Key'
                - $ref: '#/components/schemas/Key_Array'
        description: key to add
      responses:
        '201':
          description: key created
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Key'
                  - $ref: '#/components/schemas/Key_Array'
              examples:
                # EXAMPLE: fetching all keys with the same subjectId
                keys_post_default:
                  $ref: "#/components/examples/keys_post_default"
                keys_post_array:
                  $ref: "#/components/examples/keys_post_array"
        '400':
          description: 'invalid input, object invalid'
          content:
            application/json:
              examples:
                keys_post_duplicate:
                  $ref: "#/components/examples/keys_post_bad_request"
  /keys/{keyId}:
    get:
      summary: Returns key based id
      operationId: getKey
      description: |
        By including the id, get a single key
      parameters:
        - in: path
          name: keyId
          description: the id of a specific key
          required: true
          schema:
            $ref: '#/components/schemas/int_id'
      responses:
        '200':
          description: includes the results matching query string criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Key'
              examples:
                keys_id_default:
                  $ref: "#/components/examples/keys_id_default"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: updates a whole key
      operationId: putKey
      description: Updates a whole key
      parameters:
        - in: path
          name: keyId
          description: the id of a specific key
          required: true
          schema:
            $ref: '#/components/schemas/int_id'
      responses:
        '200':
          description: key updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Key'
              examples:
                # EXAMPLE: updating a key
                keys_id_put_default:
                  $ref: "#/components/examples/keys_id_default"
        '400':
          description: 'invalid input, object invalid'
    patch:
      summary: patches a subset of fields on a key
      operationId: patchkey
      description: Patches a key by field
      parameters:
        - in: path
          name: keyId
          description: the id of a specific key
          required: true
          schema:
            $ref: '#/components/schemas/int_id'
      responses:
        '200':
          description: key patched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Key'
              examples:
                # EXAMPLE: updating a key
                keys_id_patch_default:
                  $ref: "#/components/examples/keys_id_default"
        '400':
          description: 'invalid input, object invalid'
          content:
            application/json:
              examples:
                keys_post_duplicate:
                  $ref: "#/components/examples/keys_post_bad_request"
    delete:
      summary: deletes a key
      operationId: deletekey
      description: Deletes a key
      parameters:
        - in: path
          name: keyId
          description: the id of a specific key
          required: true
          schema:
            $ref: '#/components/schemas/int_id'
      responses:
        '200':
          description: key deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Key'
              examples:
                keys_id_delete_default:
                  $ref: "#/components/examples/keys_id_delete_default"

components: 
  schemas:
    Key_FJS_Array:
      type: string
      required:
        - total
        - limit
        - skip
        - data
      properties:
        total:
          type: integer
        limit:
          type: integer
        skip:
          type: integer
        data:
          type: array
          items:
            $ref: "#/components/schemas/Key"
    Key:
      type: object
      required:
        - clientKey
        - clientSecret
        - orgId
      properties:
        id:
          $ref: "#/components/schemas/int_id"
        clientKey:
          type: string
          example: user01
        orgId:
          type: string
          example: password123
        createdAt:
          $ref: "#/components/schemas/iso_date"
    Key_Array:
      type: array
      items:
        $ref: "#/components/schemas/Key"
  examples:
    keys_default:
      value:
        total: 1
        limit: 10
        skip: 0
        data:
          - id: 1
            clientKey: "abcdefg"
            orgId: "orgIdUsedForTesting"
            createdAt: "2018-11-11T23:36:55.994Z"
            updatedAt: "2010-01-02T10:54:59.531Z"
    keys_post_default:
      value:
        id: 1
        clientKey: "hijklmno"
        orgId: "orgIdUsedForTesting"
        createdAt: "2012-11-11T23:36:55.994Z"
        updatedAt: "2005-01-02T10:54:59.531Z"
    keys_post_array:
      value:
        - id: 1
          clientKey: "abcdefg"
          orgId: "orgIdUsedForTesting"
          createdAt: "2018-11-11T23:36:55.994Z"
          updatedAt: "2010-01-02T10:54:59.531Z"
        - id: 2
          clientKey: "hijklmno"
          orgId: "orgIdUsedForTesting"
          createdAt: "2019-11-11T23:36:55.994Z"
          updatedAt: "2020-01-02T10:54:59.531Z"
    keys_id_patch_default:
      value:
        id: 1
        clientKey: hijklmno
        orgId: orgIdUsedForTesting
        createdAt: '2012-11-11T23:36:55.994Z'
        updatedAt: '2005-01-02T10:54:59.531Z'
    keys_post_bad_request:
      value:
        name: BadRequest
        message: 'Validation error'
        code: 400
        className: bad-request
        data: {}
        errors:
            - { message: 'clientKey must be unique', type: 'unique violation', path: clientKey, value: userName, origin: DB, instance: {id: null, clientKey: userName, clientSecret: $2a$10$.hJrkH/Lbam.ef8XTveAP.NSkDDFEIH891sL4Uj593n6VPr/5bEWG, orgId: abcdefg, updatedAt: '2021-03-17T01:10:39.286Z', createdAt: '2021-03-17T01:10:39.286Z'}, validatorKey: not_unique, validatorName: null, validatorArgs: [] }
            - { message: 'notNull Violation: keys.clientSecret cannot be null', type: 'notNull Violation', path: clientSecret, value: null, origin: CORE, instance: {id: null, clientKey: userName, orgId: abcdefg, updatedAt: '2021-03-17T01:10:39.286Z', createdAt: '2021-03-17T01:10:39.286Z'}, validatorKey: is_null, validatorName: null, validatorArgs: [] }
            - { message: 'notNull Violation: keys.clientKey cannot be null', type: 'notNull Violation', path: clientSecret, value: null, origin: CORE, instance: {id: null, "clientSecret": "$2a$10$2cx.9iXUxamaP9hrwIkOyuzDHhy1rrWZDPjV53eh445paSTaRG3AO", orgId: abcdefg, updatedAt: '2021-03-17T01:10:39.286Z', createdAt: '2021-03-17T01:10:39.286Z'}, validatorKey: is_null, validatorName: null, validatorArgs: [] }
    keys_id_default:
      $ref: "#/components/examples/keys_post_default"
    keys_id_delete_default:
      value:
        id: 1
        clientKey: GRC
        clientSecret: password123
        orgId: "orgIdUsedForTesting"
    keys_post_duplicate:
      value:
        name: BadRequest
        message: Validation error
        code: 400
        className: bad-request
        data: {}
        errors:
          - message: clientKey must be unique
            type: unique violation
            path: clientKey
            value: userName
            origin: DB
            instance:
              id: null
              clientKey: userName
              clientSecret: >-
                $2a$10$.hJrkH/Lbam.ef8XTveAP.NSkDDFEIH891sL4Uj593n6VPr/5bEWG
              orgId: abcdefg
              updatedAt: '2021-03-17T01:10:39.286Z'
              createdAt: '2021-03-17T01:10:39.286Z'
            validatorKey: not_unique
            validatorName: null
            validatorArgs: []
          - message: 'notNull Violation: keys.clientSecret cannot be null'
            type: notNull Violation
            path: clientSecret
            value: null
            origin: CORE
            instance:
              id: null
              clientKey: userName
              orgId: abcdefg
              updatedAt: '2021-03-17T01:10:39.286Z'
              createdAt: '2021-03-17T01:10:39.286Z'
            validatorKey: is_null
            validatorName: null
            validatorArgs: []
          - message: 'notNull Violation: keys.clientKey cannot be null'
            type: notNull Violation
            path: clientSecret
            value: null
            origin: CORE
            instance:
              id: null
              clientSecret: >-
                $2a$10$2cx.9iXUxamaP9hrwIkOyuzDHhy1rrWZDPjV53eh445paSTaRG3AO
              orgId: abcdefg
              updatedAt: '2021-03-17T01:10:39.286Z'
              createdAt: '2021-03-17T01:10:39.286Z'
            validatorKey: is_null
            validatorName: null
            validatorArgs: []