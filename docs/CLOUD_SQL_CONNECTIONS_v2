## Cloud SQL Connections

This guide provides detailed steps for connecting to Cloud SQL instances, especially under firewall restrictions commonly encountered by internal users.

### Download the Cloud SQL Proxy

To establish a secure connection to your Cloud SQL instance, you first need to download the Cloud SQL Proxy. Visit the following link for the latest version and more information:

[Cloud SQL Proxy Documentation](https://cloud.google.com/sql/docs/postgres/sql-proxy)

For Mac M1 users, use the following commands to download and set up the proxy:

```shell
curl -o cloud-sql-proxy https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.9.0/cloud-sql-proxy.darwin.arm64
chmod +x cloud-sql-proxy
```



### Get the instance Connection Name

To obtain the instance connection name from GCP, you can use either the gcloud command-line tool or the GCP Console.

Using gcloud:

1. Make sure you have the gcloud tool installed and authenticated with your GCP project.
1. Set the correct project
    ```shell
    PROJECT=<PROJECT_ID>
    gcloud config set project $PROJECT_ID
    ```

1. Run the following command to list your Cloud SQL instances: 

    ```shell 
    gcloud sql instances list
    ```

1. Look for the desired instance in the output and note its CONNECTION_NAME value.

Using the GCP Console:

1. Open the GCP Console and navigate to the Cloud SQL section.
1. Select your project and locate the desired Cloud SQL instance.
1. On the instance details page, look for the "Instance connection name" field, which will be in the format `<PROJECT_ID>:<REGION>:<INSTANCE_NAME>`.


### Configure and Run the Proxy

Run the Cloud SQL Proxy using the following commands tailored to different connection scenarios:

#### Standard Connection
```shell
REGION=us-east4
INSTANCE_NAME=xxxxxxxxxxxxxxxxx
INSTANCE_CONNECTION_NAME="$PROJECT_ID:$REGION:$INSTANCE_NAME"
```
```shell
./cloud-sql-proxy --address 0.0.0.0 --port 1234 $INSTANCE_CONNECTION_NAME
```

#### Connection with Private IP and Credentials

```shell
./cloud-sql-proxy --address 0.0.0.0 --port 1235 --private-ip --credentials-file ./terraform/credentials.json $INSTANCE_CONNECTION_NAME
```

#### Connecting via a Bastion Host

To securely connect through a bastion host, use the Google Cloud SSH command:

```shell
gcloud compute ssh --zone "us-east4-a" "bastion-vm" --tunnel-through-iap --project "project_id"
```

Create a port forwarding tunnel:

```shell
gcloud compute ssh --zone us-east4-a bastion-vm --tunnel-through-iap --project project_id -- -N -L 3306:localhost:3306
```

#### Connecting to the Database

Use the following commands to initiate a connection directly to the database:

```shell
gcloud sql connect --project project_id --credentials-file ./credentials.json <INSTANCE_CONNECTION_NAME>
```

For PostgreSQL databases:

```shell
psql "host=localhost port=5432 user=postgres dbname=main"
```

### Establishing an SSH Tunnel to Bastion VM

#### Step 1 - Connect to Bastion VM

Open a terminal window and execute:

```shell
ANCHOR_PROJ_ID=project_id
ZONE=us-east4-a
gcloud compute ssh bastion-vm --tunnel-through-iap --project=$ANCHOR_PROJ_ID --zone=$ZONE
```

#### Step 2 - Inside the Bastion VM

Run the Cloud SQL Proxy inside the bastion:

```shell
INSTANCE_LOC=project_id:us-east4:instance_id
../../cloud-sql-proxy --private-ip --port 3307 $INSTANCE_LOC
```

#### Step 3 - Create a Local Tunnel from Local Machine

To map a local port to the cloud proxy port via a second SSH connection:

```shell
gcloud compute ssh bastion-vm --tunnel-through-iap --project=$ANCHOR_PROJ_ID --zone=$ZONE -- -N -L 3307:localhost:3306
```

This setup maps your local port 3306 to the Cloud SQL Proxy port 3307, allowing secure database connectivity within the Virtual Private Cloud (VPC).