# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  posts: PostManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForUpdateInput
  createdAt: DateTime
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForCreateInput
  createdAt: DateTime
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

type Observation {
  id: ID!
  name: String
  takeaway: String
  quote: String
  problem: String
  solution: String
  trends(where: TrendWhereInput! = {}, orderBy: [TrendOrderByInput!]! = [], take: Int, skip: Int! = 0): [Trend!]
  trendsCount(where: TrendWhereInput! = {}): Int
  createdAt: DateTime
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

input ObservationWhereUniqueInput {
  id: ID
}

input ObservationWhereInput {
  AND: [ObservationWhereInput!]
  OR: [ObservationWhereInput!]
  NOT: [ObservationWhereInput!]
  id: IDFilter
  name: StringFilter
  takeaway: StringFilter
  quote: StringFilter
  problem: StringFilter
  solution: StringFilter
  trends: TrendManyRelationFilter
  createdAt: DateTimeNullableFilter
  tags: TagManyRelationFilter
}

input TrendManyRelationFilter {
  every: TrendWhereInput
  some: TrendWhereInput
  none: TrendWhereInput
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input ObservationOrderByInput {
  id: OrderDirection
  name: OrderDirection
  takeaway: OrderDirection
  quote: OrderDirection
  problem: OrderDirection
  solution: OrderDirection
  createdAt: OrderDirection
}

input ObservationUpdateInput {
  name: String
  takeaway: String
  quote: String
  problem: String
  solution: String
  trends: TrendRelateToManyForUpdateInput
  createdAt: DateTime
  tags: TagRelateToManyForUpdateInput
}

input TrendRelateToManyForUpdateInput {
  disconnect: [TrendWhereUniqueInput!]
  set: [TrendWhereUniqueInput!]
  create: [TrendCreateInput!]
  connect: [TrendWhereUniqueInput!]
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input ObservationUpdateArgs {
  where: ObservationWhereUniqueInput!
  data: ObservationUpdateInput!
}

input ObservationCreateInput {
  name: String
  takeaway: String
  quote: String
  problem: String
  solution: String
  trends: TrendRelateToManyForCreateInput
  createdAt: DateTime
  tags: TagRelateToManyForCreateInput
}

input TrendRelateToManyForCreateInput {
  create: [TrendCreateInput!]
  connect: [TrendWhereUniqueInput!]
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Trend {
  id: ID!
  name: String
  createdAt: DateTime
  observations(where: ObservationWhereInput! = {}, orderBy: [ObservationOrderByInput!]! = [], take: Int, skip: Int! = 0): [Observation!]
  observationsCount(where: ObservationWhereInput! = {}): Int
  trends(where: TrendWhereInput! = {}, orderBy: [TrendOrderByInput!]! = [], take: Int, skip: Int! = 0): [Trend!]
  trendsCount(where: TrendWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

input TrendWhereUniqueInput {
  id: ID
}

input TrendWhereInput {
  AND: [TrendWhereInput!]
  OR: [TrendWhereInput!]
  NOT: [TrendWhereInput!]
  id: IDFilter
  name: StringFilter
  createdAt: DateTimeNullableFilter
  observations: ObservationManyRelationFilter
  trends: TrendManyRelationFilter
  tags: TagManyRelationFilter
}

input ObservationManyRelationFilter {
  every: ObservationWhereInput
  some: ObservationWhereInput
  none: ObservationWhereInput
}

input TrendOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
}

input TrendUpdateInput {
  name: String
  createdAt: DateTime
  observations: ObservationRelateToManyForUpdateInput
  trends: TrendRelateToManyForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input ObservationRelateToManyForUpdateInput {
  disconnect: [ObservationWhereUniqueInput!]
  set: [ObservationWhereUniqueInput!]
  create: [ObservationCreateInput!]
  connect: [ObservationWhereUniqueInput!]
}

input TrendUpdateArgs {
  where: TrendWhereUniqueInput!
  data: TrendUpdateInput!
}

input TrendCreateInput {
  name: String
  createdAt: DateTime
  observations: ObservationRelateToManyForCreateInput
  trends: TrendRelateToManyForCreateInput
  tags: TagRelateToManyForCreateInput
}

input ObservationRelateToManyForCreateInput {
  create: [ObservationCreateInput!]
  connect: [ObservationWhereUniqueInput!]
}

type Post {
  id: ID!
  title: String
  content: Post_content_Document
  author: User
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input PostUpdateInput {
  title: String
  content: JSON
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  content: JSON
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Tag {
  id: ID!
  name: String
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  observations(where: ObservationWhereInput! = {}, orderBy: [ObservationOrderByInput!]! = [], take: Int, skip: Int! = 0): [Observation!]
  observationsCount(where: ObservationWhereInput! = {}): Int
  trends(where: TrendWhereInput! = {}, orderBy: [TrendOrderByInput!]! = [], take: Int, skip: Int! = 0): [Trend!]
  trendsCount(where: TrendWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
  observations: ObservationManyRelationFilter
  trends: TrendManyRelationFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
  observations: ObservationRelateToManyForUpdateInput
  trends: TrendRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
  observations: ObservationRelateToManyForCreateInput
  trends: TrendRelateToManyForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createObservation(data: ObservationCreateInput!): Observation
  createObservations(data: [ObservationCreateInput!]!): [Observation]
  updateObservation(where: ObservationWhereUniqueInput!, data: ObservationUpdateInput!): Observation
  updateObservations(data: [ObservationUpdateArgs!]!): [Observation]
  deleteObservation(where: ObservationWhereUniqueInput!): Observation
  deleteObservations(where: [ObservationWhereUniqueInput!]!): [Observation]
  createTrend(data: TrendCreateInput!): Trend
  createTrends(data: [TrendCreateInput!]!): [Trend]
  updateTrend(where: TrendWhereUniqueInput!, data: TrendUpdateInput!): Trend
  updateTrends(data: [TrendUpdateArgs!]!): [Trend]
  deleteTrend(where: TrendWhereUniqueInput!): Trend
  deleteTrends(where: [TrendWhereUniqueInput!]!): [Trend]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  observations(where: ObservationWhereInput! = {}, orderBy: [ObservationOrderByInput!]! = [], take: Int, skip: Int! = 0): [Observation!]
  observation(where: ObservationWhereUniqueInput!): Observation
  observationsCount(where: ObservationWhereInput! = {}): Int
  trends(where: TrendWhereInput! = {}, orderBy: [TrendOrderByInput!]! = [], take: Int, skip: Int! = 0): [Trend!]
  trend(where: TrendWhereUniqueInput!): Trend
  trendsCount(where: TrendWhereInput! = {}): Int
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
