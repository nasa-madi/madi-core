import { HookContextData, HookManager, Middleware } from '@feathersjs/hooks';
import { Service, ServiceOptions, HookContext, FeathersService, HookMap, AroundHookFunction, HookFunction } from './declarations';
export declare function collectHooks(target: any, method: string): any;
export declare function convertHookData(input: any): {
    [method: string]: HookFunction<import("./declarations").Application<any, any>, Service<any, Partial<any>, import("./declarations").Params<import("./declarations").Query>>>[] | AroundHookFunction<import("./declarations").Application<any, any>, Service<any, Partial<any>, import("./declarations").Params<import("./declarations").Query>>>[];
};
export declare function enableHooks(object: any, methods?: string[]): (this: any, input: HookMap<any, any>) => any;
export declare function createContext(service: Service, method: string, data?: HookContextData): HookContext<import("./declarations").Application<any, any>, any>;
export declare class FeathersHookManager<A> extends HookManager {
    app: A;
    method: string;
    constructor(app: A, method: string);
    collectMiddleware(self: any, args: any[]): Middleware[];
    initializeContext(self: any, args: any[], context: HookContext): import("@feathersjs/hooks").HookContext<any, any>;
    middleware(mw: Middleware[]): this;
}
export declare function hookMixin<A>(this: A, service: FeathersService<A>, path: string, options: ServiceOptions): FeathersService<A, Service<any, Partial<any>, import("./declarations").Params<import("./declarations").Query>>>;
